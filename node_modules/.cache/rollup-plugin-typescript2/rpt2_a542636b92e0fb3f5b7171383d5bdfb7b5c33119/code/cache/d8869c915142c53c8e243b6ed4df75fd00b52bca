{"code":"import { useState } from \"react\";\r\nimport ExpiredStorage from \"expired-storage\";\r\n/**\r\n * An implement of the same API of react useState but with the difference of\r\n * localStorage persist. So, you can change your state and when the user reload\r\n * the browser, the state will persist!\r\n *\r\n * @param key name of the key to be stored on localStorage\r\n * @param initialValue value to be the default, like useState('defaultvalue')\r\n * @param expire time in seconds to expiry this state, set false to infinite\r\n */\r\nexport function useLocalStorage(key, initialValue, expire) {\r\n    if (expire === void 0) { expire = 60 * 30; }\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    var _a = useState(function () {\r\n        try {\r\n            // Instantiate the expiredStorage\r\n            var expiredStorage = new ExpiredStorage();\r\n            // Get from local storage by key\r\n            var item = expiredStorage.getItem(key);\r\n            var parsedInitialValue = JSON.stringify(initialValue);\r\n            // Parse stored json or if none return initialValue\r\n            return item ? JSON.parse(item) : JSON.parse(parsedInitialValue);\r\n        }\r\n        catch (error) {\r\n            // If error also return initialValue\r\n            console.error(\"Error when using useLocalStorage\" + error);\r\n            return initialValue;\r\n        }\r\n    }), storedValue = _a[0], setStoredValue = _a[1];\r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    var setValue = function (value) {\r\n        try {\r\n            var expiredStorage = new ExpiredStorage();\r\n            // Allow value to be a function so we have same API as useState\r\n            var valueToStore = value instanceof Function ? value(storedValue) : value;\r\n            // Save state\r\n            setStoredValue(valueToStore);\r\n            // Save to local storage\r\n            expire === false\r\n                ? window.localStorage.setItem(key, JSON.stringify(valueToStore))\r\n                : expiredStorage.setItem(key, JSON.stringify(valueToStore), typeof expire === \"number\" ? expire : undefined);\r\n        }\r\n        catch (error) {\r\n            // A more advanced implementation would handle the error case\r\n            console.error(error);\r\n        }\r\n    };\r\n    return [storedValue, setValue];\r\n}\r\nexport default useLocalStorage;\r\n","references":["/home/joaomantovani/penseapp/useLocalStorage/node_modules/@types/react/index.d.ts","/home/joaomantovani/penseapp/useLocalStorage/node_modules/@types/expired-storage/index.d.ts"],"dts":{"name":"/home/joaomantovani/penseapp/useLocalStorage/node_modules/.cache/rollup-plugin-typescript2/placeholder/useLocalStorage/useLocalStorage.d.ts","writeByteOrderMark":false,"text":"/**\r\n * An implement of the same API of react useState but with the difference of\r\n * localStorage persist. So, you can change your state and when the user reload\r\n * the browser, the state will persist!\r\n *\r\n * @param key name of the key to be stored on localStorage\r\n * @param initialValue value to be the default, like useState('defaultvalue')\r\n * @param expire time in seconds to expiry this state, set false to infinite\r\n */\r\nexport declare function useLocalStorage<T>(key: string, initialValue: T, expire?: number | boolean): [T, (value: T) => void];\r\nexport default useLocalStorage;\r\n"}}
